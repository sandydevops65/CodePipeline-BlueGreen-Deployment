#  Author: Piyush Verma
#  Last Modified: 22/02/2020

Parameters:
  VpcCidr:
    Type: String
    Description: Please enter the ECS VPC cidr.
    Default: 10.0.0.0/16
    AllowedPattern: \d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}\/(1[6-9]|2[0-9]|3[0-2])
    ConstraintDescription: Must be a valid IP

  SubnetCidr1:
    Type: String
    Description: Please enter the cidr for ECS Subnet1.
    Default: 10.0.1.0/28
    AllowedPattern: \d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}\/(1[6-9]|2[0-9]|3[0-2])
    ConstraintDescription: Must be a valid IP and withing the VPC range

  SubnetCidr2:
    Type: String
    Description: Please enter the cidr for ECS Subnet2.
    Default: 10.0.2.0/28
    AllowedPattern: \d{1,3}.\d{1,3}.\d{1,3}.\d{1,3}\/(1[6-9]|2[0-9]|3[0-2])
    ConstraintDescription: Must be a valid IP and withing the VPC range

  ApplicationName:
    Description: Please enter the name for your application in AWS Code Deploy
    Type: String
    Default: AppByLambda

  DeploymentGroupName:
    Description: Please enter the name for your Deployment Group in AWS Code Deploy
    Type: String
    Default: DgByLambda

Resources:
  EcsVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      Tags:
        - Key: Name
          Value: ECSVpc-via-Cloudformation-template

  EcsSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVpc
      CidrBlock: !Ref SubnetCidr1
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: ECSSubnet1-via-Cloudformation-template

  EcsSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref EcsVpc
      CidrBlock: !Ref SubnetCidr2
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      Tags:
        - Key: Name
          Value: ECSSubnet2-via-Cloudformation-template

  EcsLbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      SecurityGroupIngress:
        - FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
        - FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
        - FromPort: 81
          ToPort: 81
          CidrIp: 0.0.0.0/0
          IpProtocol: tcp
      GroupName: EcsLbSecurityGroup
      GroupDescription: This security group is used for both Ecs fargate containers and Load Balancer
      VpcId: !Ref EcsVpc
      Tags:
        - Key: Name
          Value: EcsLbSecurityGroup-via-Cloudformation-template

  InternetGateway:
    DependsOn: EcsVpc
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: InternetGateway-via-Cloudformation-template

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref EcsVpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref EcsVpc
      Tags:
      - Key: Name
        Value: PublicRouteTable-via-Cloudformation-template

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref EcsSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref EcsSubnet2

  LoadBalancerTG1:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: LoadBalancerTG1
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: LoadBalancerTG1-via-Cloudformation-template
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !Ref EcsVpc

  LoadBalancerTG2:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckPort: 8080
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: LoadBalancerTG2
      Port: 8080
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: LoadBalancerTG2-via-Cloudformation-template
      TargetType: ip
      UnhealthyThresholdCount: 5
      VpcId: !Ref EcsVpc

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Name: LoadBalancer
      Scheme: internet-facing
      SecurityGroups:
        - !Ref EcsLbSecurityGroup
      Subnets:
        - !Ref EcsSubnet1
        - !Ref EcsSubnet2
      Tags:
        - Key: Name
          Value: LoadBalancer-via-Cloudformation-template
      Type: application

  LoadBalancerMainListener:
    DependsOn: LoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerTG1
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  LoadBalancerTestListener:
    DependsOn: LoadBalancer
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref LoadBalancerTG2
          Type: forward
      LoadBalancerArn: !Ref LoadBalancer
      Port: 81
      Protocol: HTTP

  # Cloudwatch Resource
  EcsLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: EcsLogGroup
      RetentionInDays: 7

  # ECS Resources
  EcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: EcsCluster
      Tags:
       - Key: Name
         Value: EcsCluster-via-Cloudformation-template

  EcsTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: "AccountID.dkr.ecr.us-east-2.amazonaws.com/ecs-taskonly-repo:build-57c574db-f702-457f-b7c2-d416f210d204"
          Name: SpringAppContainer
          PortMappings:
            - ContainerPort: 8080
              Protocol: tcp
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref EcsLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: 'SpringAppContainer'
      Cpu: "256"
      ExecutionRoleArn: arn:aws:iam::AccountID:role/ecsTaskExecutionRole
      Family: EcsTaskDefinition
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Tags:
        - Key: Name
          Value: EcsTaskDefinition-via-Cloudformation-template

  EcsService:
    DependsOn: LoadBalancerMainListener
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref EcsCluster
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 50
      DesiredCount: 1
      HealthCheckGracePeriodSeconds: 10
      LaunchType: FARGATE
      DeploymentController:
        Type: CODE_DEPLOY
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      LoadBalancers:
        - ContainerName: SpringAppContainer
          ContainerPort: 8080
          TargetGroupArn: !Ref LoadBalancerTG1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref EcsLbSecurityGroup
          Subnets:
            - !Ref EcsSubnet1
            - !Ref EcsSubnet2
      SchedulingStrategy: REPLICA
      ServiceName: EcsService
      Tags:
        - Key: Name
          Value: EcsService-via-Cloudformation-template
      TaskDefinition: !Ref EcsTaskDefinition

  CodeDeployApplication:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Ref ApplicationName
      ComputePlatform: ECS

  DeploymentGroupLambdaApp:
    DependsOn: EcsService
    Type: AWS::Lambda::Function
    Properties:
      Code: 
        ZipFile: !Sub |
          import boto3
          import json
          def lambda_handler(event, context):
            client = boto3.client('codedeploy')
            response = client.create_deployment_group(
            applicationName='${ApplicationName}',
            deploymentGroupName='${DeploymentGroupName}',
            deploymentConfigName='CodeDeployDefault.ECSAllAtOnce',
            serviceRoleArn='arn:aws:iam::AccountID:role/CodeDeployRoleForECS',
            deploymentStyle={
              'deploymentType': 'BLUE_GREEN',
              'deploymentOption': 'WITH_TRAFFIC_CONTROL'
            },
            
            blueGreenDeploymentConfiguration= {
              'terminateBlueInstancesOnDeploymentSuccess': {
              "action": "TERMINATE",
              "terminationWaitTimeInMinutes": 5
              },
            
            "deploymentReadyOption": {
            "actionOnTimeout": "CONTINUE_DEPLOYMENT"
            }
            },
            loadBalancerInfo={
            "targetGroupPairInfoList": [{
            "targetGroups": [{
            "name": "LoadBalancerTG1"
            }, {
            "name": "LoadBalancerTG2"
            }],
            "prodTrafficRoute": {
            "listenerArns": ["${LoadBalancerMainListener}"]
            },
            "testTrafficRoute": {
            "listenerArns": ["${LoadBalancerTestListener}"]
            }}
            ]
            },
            ecsServices=[{
            "serviceName": "EcsService",
            "clusterName": "EcsCluster"
            }]
            )
            print(response)
      Description: Creates Deployment Group for AWS CodeDeploy
      FunctionName: create-deployment-group
      Handler: index.lambda_handler
      MemorySize: 128
      Role: arn:aws:iam::AccountID:role/LambdaAdminAccess
      Runtime: python3.7
      Timeout: 60

  LambdaToCallDGLambda:
    DependsOn: DeploymentGroupLambdaApp
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: AppLambdaCaller
      Code:
        ZipFile: !Sub |

          import boto3, json
          import cfnresponse

          def handler(event, context):
              print('EVENT:[{}]'.format(event))
              lambda_client = boto3.client('lambda')
              test_event = '{"name":"test1"}'
              lambda_client.invoke(
                  FunctionName='create-deployment-group',
                  InvocationType='Event',
                  Payload=test_event,
              )
              responseValue = 120
              responseData = {}
              responseData['Data'] = responseValue
              cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)

      Description: This Lambda function calls create-deployment-group to create Deployment Group for AWS CodeDeploy from the CloudFormation template
      Handler: index.handler
      Role: arn:aws:iam::AccountID:role/LambdaAdminAccess
      Runtime: python3.7
      Timeout: 60

  PrimerInvoke:
    Type: AWS::CloudFormation::CustomResource
    DependsOn: LambdaToCallDGLambda
    Version: "1.0"
    Properties:
      ServiceToken: !GetAtt LambdaToCallDGLambda.Arn

  # Pipeline Resources
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codebuild.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess
    
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            Service: codepipeline.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties: 
      Artifacts:
        Type: CODEPIPELINE
      Description: "Creates a build from Github"
      Environment: 
        ComputeType: "BUILD_GENERAL1_SMALL"
        Image: "aws/codebuild/standard:2.0"
        ImagePullCredentialsType: "CODEBUILD"
        PrivilegedMode: true
        Type: "LINUX_CONTAINER"
      LogsConfig: 
          CloudWatchLogs: 
            GroupName: "AWSCodeBuild"
            Status: "ENABLED"
            StreamName: "BuildLogs"
      Name: "CodeBuildProject"
      ServiceRole: !Ref CodeBuildServiceRole
      Source: 
        Auth:
          Type: "OAUTH"
        Type: CODEPIPELINE
        SourceIdentifier: GitHub
      Tags: 
        - Key: "Name"
          Value: "Code Build"

  CodePipelineS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      VersioningConfiguration:
        Status: Enabled
      AccessControl: BucketOwnerFullControl

  CodePipeline:
    DependsOn: PrimerInvoke
    Type: AWS::CodePipeline::Pipeline
    Properties: 
      ArtifactStore:
        Location: !Ref CodePipelineS3Bucket
        Type: S3
      Name: CodePipeline
      RoleArn: !GetAtt
        - CodePipelineServiceRole
        - Arn
      Stages: 
        - Name: Source
          Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration: 
                Owner: "piyushverma95"
                Repo: "CodePipeline-BlueGreen-Deployment"
                PollForSourceChanges: "false"
                Branch: "master"
                OAuthToken: "d4a762bcd91d04f935b9969800f1cf293d0a7ed9"
              RunOrder: 1
        - Name: Build
          Actions: 
            - Name: BuildAction
              ActionTypeId: 
                Category: "Build"
                Owner: "AWS"
                Provider: "CodeBuild"
                Version: "1"
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration: 
                ProjectName: !Ref CodeBuildProject
              RunOrder: 2
        - Name: Deploy
          Actions: 
            - Name: DeployAction
              ActionTypeId: 
                Category: "Deploy"
                Owner: "AWS"
                Provider: "CodeDeployToECS"
                Version: "1"
              InputArtifacts:
                - Name: BuildOutput
              Configuration: 
                ApplicationName: !Ref ApplicationName
                DeploymentGroupName: !Ref DeploymentGroupName
                TaskDefinitionTemplateArtifact: BuildOutput
                TaskDefinitionTemplatePath: taskdef.json
                AppSpecTemplateArtifact: BuildOutput
                AppSpecTemplatePath: appspec.yaml
                Image1ArtifactName: BuildOutput
                Image1ContainerName: IMAGE1_NAME
              RunOrder: 3 
      Tags: 
        - Key: Name
          Value: CodePipeline-via-Cloudformation-template 
  
  ProjectWebHook:
    Type: AWS::CodePipeline::Webhook
    Properties: 
      Name: codepipeline-webhook      
      Authentication: GITHUB_HMAC 
      AuthenticationConfiguration:
        SecretToken: "d4a762bcd91d04f935b9969800f1cf293d0a7ed9"
      Filters: 
      - JsonPath: "$.ref" 
        MatchEquals: refs/heads/{Branch} 
      RegisterWithThirdParty: true
      TargetAction: SourceAction
      TargetPipeline: !Ref CodePipeline
      TargetPipelineVersion: !GetAtt CodePipeline.Version

Outputs:
  LoadBalancerDNS:
    Description: A reference to the created Load Balancer DNS
    Value: !GetAtt LoadBalancer.DNSName